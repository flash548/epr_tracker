{"version":3,"sources":["EPRTable.js","App.js","serviceWorker.js","index.js"],"names":["EPRTable","props","epr_dates","aca_dates","updateEPR","event","preventDefault","target","id","updateACA","eprDateChanged","split","value","acaDateChanged","userid","className","role","undefined","amnData","raterInfo","rank","fname","mi","lname","subordinates","data","epr_last_done","epr_next_due","aca_last_done","aca_next_due","dumpTable","map","subord","username","data-toggle","data-target","user_id","aria-labelledby","for","type","onChange","onClick","reports","length","App","getUserData","a","fetch","baseurl","json","setState","date","newDates","Date","setDate","getDate","method","headers","body","JSON","stringify","state","firstname","lastname","matches","window","location","search","match","this","React","Component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.288a5323.chunk.js","sourcesContent":["import React from 'react';\n\nfunction EPRTable(props) {\n\n    var epr_dates = {};\n    var aca_dates = {};\n\n    function updateEPR(event) {\n        event.preventDefault();\n        props.updateEPR(epr_dates[event.target.id], event.target.id)\n    }\n\n    function updateACA(event) {\n        event.preventDefault();\n        props.updateACA(aca_dates[event.target.id], event.target.id)\n    }\n\n    function eprDateChanged(event) {\n        epr_dates[event.target.id.split('-')[0]] = event.target.value;\n    }\n\n    function acaDateChanged(event) {\n        aca_dates[event.target.id.split('-')[0]] = event.target.value;\n    }\n\n    // internal helper to parse through nested JSON \n    //  structure and render a collapsible table widget with Bootstrap\n    function dumpTable(data) {\n\n        return data.map(subord => (\n            <div>\n                <table className=\"table table-sm\">\n                    <thead>\n                        <tr className='table-primary'>\n                            <th>Name</th>\n                            <th>Rank</th>\n                            <th>EPR Last Done</th>\n                            <th>EPR Next Due</th>\n                            <th>ACA Last Done</th>\n                            <th>ACA Next Due</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr>\n                            <td><button className=\"btn btn-primary\" id={`#${subord.data.username}`} data-toggle=\"collapse\" data-target={`#${subord.data.username}`}>{subord.data.fname + ' ' + subord.data.mi + ' ' + subord.data.lname}</button></td>\n                            <td>{subord.data.rank}</td>\n                            <td>                                \n                                <div className=\"dropdown\"> \n                                    {subord.data.epr_last_done}<br/>\n                                    <button className=\"btn btn-sm btn-secondary dropdown-toggle\" id={`${subord.data.user_id}`} data-toggle=\"dropdown\">Change</button>\n                                    <div className=\"dropdown-menu\" aria-labelledby={`${subord.data.username}`}>\n                                        <form className=\"px-4 py-3\">\n                                        <div className=\"form-group\">\n                                            <label for=\"epr_last_done_date\">Date EPR Last Done:</label>\n                                            <input type=\"date\" className=\"form-control\" id={`${subord.data.user_id}-epr_last_done_date`} onChange={eprDateChanged}/>\n                                        </div>                                        \n                                        <button type=\"submit\" id={`${subord.data.user_id}`} className=\"btn btn-primary btn-sm\" onClick={updateEPR}>Submit</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </td>\n                            <td>{subord.data.epr_next_due}</td>\n                            <td>\n                                <div className=\"dropdown\">\n                                    {subord.data.aca_last_done}<br/>\n                                    <button className=\"btn btn-sm btn-secondary dropdown-toggle\" id={`${subord.data.user_id}`} data-toggle=\"dropdown\">Change</button>\n                                    <div className=\"dropdown-menu\" aria-labelledby={`${subord.data.username}`}>\n                                        <form className=\"px-4 py-3\">\n                                        <div className=\"form-group\">\n                                            <label for=\"aca_last_done_date\">Date ACA Last Done:</label>\n                                            <input type=\"date\" className=\"form-control\" id={`${subord.data.user_id}-aca_last_done_date`} onChange={acaDateChanged}/>\n                                        </div>                                        \n                                        <button type=\"button\" data-toggle=\"dropdown\" id={`${subord.data.user_id}`} className=\"btn btn-primary btn-sm\" onClick={updateACA}>Submit</button>\n                                        </form>\n                                    </div>\n                                </div>\n                            </td>\n                            <td>{subord.data.aca_next_due}</td>                    \n                        </tr>\n                    </tbody>                \n                </table>\n                <div className=\"collapse\" id={`${subord.data.username}`}>\n                    <div className=\"card card-body\">\n                        { (subord.reports && subord.reports.length > 0) ? dumpTable(subord.reports) : <div>No subordinates</div> }\n                    </div>\n                </div>\n            </div>\n            )\n        )  \n    }\n\n    return (\n        (props.userid === 0) ? (<div className=\"spinner-border text-primary\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                                </div>) : (props.userid === undefined) ? (<div><h6>User Not Found</h6></div>)\n            :            \n                (<div>\n                    <div className=\"alert alert-dark\" role=\"alert\">Your Rater</div>\n                    <p>{props.amnData.raterInfo.rank + ' ' + props.amnData.raterInfo.fname + ' ' + props.amnData.raterInfo.mi + ' ' + props.amnData.raterInfo.lname}</p>\n                    <div className=\"alert alert-dark\" role=\"alert\">Your Data</div>\n                    <table className=\"table table-sm\">\n                        <thead>\n                            <tr className='table-primary'>\n                                <th>Name</th>\n                                <th>Rank</th>\n                                <th>EPR Last Done</th>\n                                <th>EPR Next Due</th>\n                                <th>ACA Last Done</th>\n                                <th>ACA Next Due</th>\n                            </tr>\n                            <tr>\n                                <td>{props.amnData.subordinates.data.fname + ' ' + props.amnData.subordinates.data.mi + ' ' + props.amnData.subordinates.data.lname}</td>\n                                <td>{props.amnData.subordinates.data.rank}</td>\n                                <td>{props.amnData.subordinates.data.epr_last_done}</td>\n                                <td>{props.amnData.subordinates.data.epr_next_due}</td>\n                                <td>{props.amnData.subordinates.data.aca_last_done}</td>\n                                <td>{props.amnData.subordinates.data.aca_next_due}</td>\n                            </tr>\n                        </thead>\n                    </table>            \n                    <div className=\"alert alert-dark\" role=\"alert\">Your Subordinate Data</div>                                   \n                        {\n                            dumpTable(props.amnData.subordinates.reports, 0)\n                        }\n                </div>)\n    )\n\n\n}\n\nexport default EPRTable;","import React from 'react';\nimport EPRTable from './EPRTable';\nimport './App.css';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.baseurl = \"http://localhost:3000\";\n    this.state = { \n        userid : 0,\n        amnData: {},\n        firstname: props.firstname,\n        lastname: props.lastname\n    }\n    \n    // local hack I made to be able to pump props in...\n    if (!(props.firstname && props.lastname)) {\n      let matches = window.location.search.match(/\\?firstname=(.+)&lastname=(.+)/)\n      if (matches) {\n        this.state['firstname'] = matches[1];\n        this.state['lastname'] = matches[2];\n      }\n    }\n  }\n\n  // get userid from passed in firstname and lastname\n  async componentDidMount() {\n    var userid = {user_id: 0};\n    try {\n      var data = await fetch(`${this.baseurl}/user?firstname=${this.state.firstname}&lastname=${this.state.lastname}`);\n      userid = await data.json();    \n    }\n    catch (e) { \n      userid = {user_id: 0};\n    }\n    finally {\n      await this.getUserData(userid.user_id);\n    }\n  }\n\n  // pulls a user data from the user id from the backed\n  // updates state, which forces the EPRTable component to update\n  getUserData = async (userid) => {\n    var amnData = {};\n    try {\n      var data = await fetch(`${this.baseurl}/getRecord?userid=${userid}`);\n      amnData = await data.json();      \n    }\n    catch (e) { \n      amnData = {\n        raterInfo : {\n            user_id : '',\n            username : '',\n            fname : 'Error',\n            mi : '',\n            lname : '',\n            rank : '',\n            epr_last_done : '',\n            epr_next_due : '',\n            aca_last_done : '',\n            aca_next_due : '',\n        },\n        subordinates: {\n            data: {\n                user_id : '',\n                username : '',\n                fname : 'Error',\n                mi : '',\n                lname : '',\n                rank : '',\n                epr_last_done : '',\n                epr_next_due : '',\n                aca_last_done : '',\n                aca_next_due : '',\n            },\n            reports: [],\n        }\n      }; \n    }\n    finally {\n      this.setState({ userid: userid, amnData: amnData })\n    }\n  }\n\n  // updates a user's last done EPR date... by user id, then repulls current\n  //  user's data to force everything to update \n  updateEPR = async (date, userid) => {\n    if (!date) return;\n\n    \n    // update user's EPR date\n    let newDates = {\n      user_id: userid,\n      epr_last_done: date,\n      epr_next_due: new Date(new Date(date).setDate(new Date(date).getDate() + 360))\n    };\n\n    await fetch(`${this.baseurl}/updateUserForms`, \n      {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newDates)\n      });\n\n    // repull all data\n    this.getUserData(this.state.userid);\n  }\n\n  // updates a user's last done ACA date... by user id, then repulls current\n  //  user's data to force everything to update \n  updateACA = async (date, userid) => {\n    if (!date) return;\n\n    \n    // update user's EPR date\n    let newDates = {\n      user_id: userid,\n      aca_last_done: date,\n      aca_next_due: new Date(new Date(date).setDate(new Date(date).getDate() + 360))\n    };\n\n    await fetch(`${this.baseurl}/updateUserForms`, \n      {\n        method: \"POST\",\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify(newDates)\n      });\n\n    // repull all data\n    this.getUserData(this.state.userid);\n\n    \n  }\n\n  render() {\n      return (\n        <div className=\"container border border-primary\">\n          <div className=\"App\">\n            <h4>EPR/ACA Tracker</h4>\n            <EPRTable userid={this.state.userid} amnData={this.state.amnData} updateEPR={this.updateEPR} updateACA={this.updateACA} />\n          </div>\n        </div>\n      )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}